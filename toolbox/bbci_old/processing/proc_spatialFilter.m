function out= proc_spatialFilter(cnt, spatFilt)
%out= proc_spatialFilter(cnt, filter_desc)
%
% filter_desc:  is a cell array of cell arrays. if subarray
%               describes one output channel: the first entry
%               is a string defining the label of the new channel.
%               it follows a list of pairs channel label + weight
%
% e.g.      {{'C3 lap', 'C3',1/2, 'C1',1/2, ...
%                       'C5',-1/6, 'FC3',-1/6, 'FC1',-1/6, ...
%                       'Cz',-1/6, 'CP3',-1/6, 'CP1',-1/6}}
%
% this function was written for a very special purpose but is
% not of general interest.

% bb, ida.first.fhg.de


if ~exist('spatFilt','var'),
  spatFilt= {{'C3 lap', 'C3',1/2, 'C1',1/2, ...
                        'C5',-1/6, 'FC3',-1/6, 'FC1',-1/6, ...
                        'Cz',-1/6, 'CP3',-1/6, 'CP1',-1/6}, ...
             {'C4 lap', 'C4',1/2, 'C2',1/2, ...
                        'Cz',-1/6, 'FC2',-1/6, 'FC4',-1/6, ...
                        'C6',-1/6, 'CP2',-1/6, 'CP4',-1/6}, ...
             {'CP3 lap', 'CP3',1/2, 'CP1',1/2, ...
                         'CP5',-1/4, 'C3',-1/4, 'C1',-1/4, ...
                         'CPz',-1/4}, ...
             {'CP lap', 'CP4',1/2, 'CP2',1/2, ...
                         'CPz',-1/4, 'C2',-1/4, 'C4',-1/4, ...
                         'CP6',-1/4}, ...
             {'Cz lap',  'Cz',1, 'C1',-1/4, 'FCz',-1/4, ...
                         'C2',-1/4, 'CPz',-1/4}, ...
             {'CPz lap', 'CPz',1, 'CP1',-1/3, 'Cz',-1/3, ...
                         'CP2',-1/3}};
end

out= copyStruct(dat, 'x','clab');
nChans= length(spatFilt);
out.x= zeros(size(dat.x,1), nChans);
out.clab= cell(1, nChans);
for fi= 1:nChans,
  elec= chanind(dat.clab, spatFilt{fi}{2:2:end});
  weight= cell2mat({spatFilt{fi}{3:2:end}});
  out.x(:,fi)= dat.x(:,elec) * weight';
  out.clab{fi}= spatFilt{fi}{1};
end
