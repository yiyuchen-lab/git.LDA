function update_pcode_repository(varargin)%UPDATE_PCODE_REPOSITORY - Convert neuro_cvs and neuro_toolbox to pcode% Authors: Konrad Grzeska, Benjamin Blankertzglobal BCI_DIR%warning('svn password has to be entered once before running this');opt= propertylist2struct(varargin{:});opt= set_defaults(opt, ...                  'filelist', ...                    strcat([BCI_DIR 'bbci_tools/include_pcode_'], ...                           {'neuro_cvs.txt', 'neuro_toolbox.txt'}), ...                  'pcode_dir', {'~/svn_first/pseuro/', ...                                '~/svn_first/pseuro_toolbox/'}, ...                  'exclude', [BCI_DIR ...                              'bbci_tools/exclude_pcode_neuro_cvs.txt'], ...                  'recursive', 1, ...                  'pcoding', 1, ...                  'test', 0);%                  'exclude_regexp', {'.*~$'}, ...if iscell(opt.filelist),  for ff= 1:length(opt.filelist),    update_pcode_repository(opt, ...                            'filelist', opt.filelist{ff}, ...                            'pcode_dir', opt.pcode_dir{ff});  end  return;endif ischar(opt.exclude) & exist(opt.exclude, 'file'),  opt.exclude= textread(opt.exclude, '%s', ...                        'commentstyle','shell');endfprintf('\n*** Processing filelist %s.\n', opt.filelist);if opt.test,  fprintf('*** TESTING MODE: Changes are only displayed.\n');end% Datei Einlesenheaderlines= 1;fid= fopen(opt.filelist);if fid==-1,  error(sprintf('could not open filelist <%s>', opt.filelist));endopt.rootdir= sscanf(fgetl(fid), 'root=%s');fclose(fid);if isempty(opt.rootdir),  warning(sprintf('rootdir is not defined in filelist %s', opt.filelist));  headerlines= 0;endwhile opt.rootdir(end)=='/',  opt.rootdir(end)= [];endfilelist= textread(opt.filelist, '%s', ...                   'commentstyle','shell', ...                   'headerlines', headerlines);olddir= pwd;targetdir_list= {};memo_opt.pcoding= opt.pcoding;for i = 1:length(filelist)    filespec = filelist{i};  if isempty(filespec),    continue;  end      opt.pcoding= memo_opt.pcoding;  nopcode_tag= '[nopcoding]';  if strncmp(nopcode_tag, filespec, length(nopcode_tag)),    opt.pcoding= 0;    filespec= deblank(filespec(length(nopcode_tag)+1:end));  end  fullfilespec= [opt.rootdir '/' filespec];  targetdir_list= do_update_pcode(fullfilespec, targetdir_list, opt);endif ~opt.test,%  cmd= sprintf('cd %s; svn add .', opt.pcode_dir); %%doesn't work recursively  for ii= 1:length(targetdir_list),    cmd= sprintf('cd %s; svn add *', targetdir_list{ii});    unix_cmd(cmd, 'could not add to svn');  end  [dmy,user]= unix('whoami');  msg= sprintf('auto pcode update issued by %s', user(1:end-1));  cmd= sprintf('cd %s; svn commit -m "%s"', opt.pcode_dir, msg);  unix_cmd(cmd, 'could not commit to svn');endcd(olddir);return;function targetdir_list= do_update_pcode(fullfilespec, targetdir_list, opt)[sourcepath, source]= fileparts(fullfilespec);targetpath= strrep(sourcepath, opt.rootdir, opt.pcode_dir);targetdir_list= unique(cat(2, targetdir_list, {targetpath}));if ~exist(targetpath, 'dir'),  sprintf('making new directory %s.\n', targetpath);  if ~opt.test,    mkdir_rec(targetpath);%    unix_cmd(sprintf('svn add %s', targetpath), ...%             'could not add new directory to svn');  endenddd= dir(fullfilespec);dd(strmatch('.',{dd.name},'exact'))= [];dd(strmatch('..',{dd.name},'exact'))= [];for j = 1:length(dd),  filename= dd(j).name;  if ~isempty(strpatternmatch(opt.exclude, filename)),    continue;  end% This works also (optional?):%  if any(apply_cellwise2(regexp(filename, opt.exclude_regexp,'once'), ...%                         'isempty'))%    continue;%  end    if (dd(j).isdir),    if opt.recursive && ~strcmpi(dd(j).name,'CVS'),      fprintf('recursing into %s.\n', [sourcepath '/' dd(j).name]);      targetdir_list= do_update_pcode([sourcepath '/' dd(j).name '/*'], ...                                      targetdir_list, opt);    else      fprintf('skipping directory %s.\n', [sourcepath '/' dd(j).name]);    end    continue;  end  ip= find(filename=='.', 1, 'last');  fileext= filename(ip+1:end);  sourcefile= [sourcepath '/' filename];    if strcmp(fileext, 'm') & opt.pcoding,    targetfile= [targetpath '/' filename(1:ip) 'p'];  else    targetfile= [targetpath '/' filename];  end    if exist(targetfile, 'file') && ~fileisnewer(sourcefile, targetfile),    %fprintf('skipping file %s.\n', sourcefile);    continue;  end  fprintf('  %s', sourcefile);    if ~opt.test,    if strcmp(fileext, 'm') && opt.pcoding,      cd(targetpath);  %% pcode will place all files into the current directory      pcode(sourcefile);      fprintf('  [pcoded]');    else      copyfile(sourcefile, targetfile);      fprintf('  [copied]');    end%    unix_cmd(sprintf('svn add %s', targetfile));  end  fprintf('\n');end